import React, { useEffect, useRef, useMemo } from 'react';
import { useLoader, useThree, ThreeEvent } from '@react-three/fiber';
import { FBXLoader } from 'three/examples/jsm/loaders/FBXLoader.js';
import * as THREE from 'three';
import { LocalCoord } from '../../../types/mission';
import { feetToMeters } from '../../../utils/sensorCalculations';

interface DockModelProps {
  position?: LocalCoord | [number, number, number]; 
  rotation?: LocalCoord | [number, number, number];
  scale?: number | [number, number, number];
  // Optional prop to specify real-world dimensions
  realWorldLength?: number; // in feet
  // Add event handlers and userData
  onClick?: (event: ThreeEvent<MouseEvent>) => void;
  onDoubleClick?: (event: ThreeEvent<MouseEvent>) => void;
  onPointerOver?: () => void;
  onPointerOut?: () => void;
  userData?: any;
}

// Default dock dimensions (approximate)
const DEFAULT_DOCK_LENGTH_FEET = 500;
const DEFAULT_DOCK_WIDTH_FEET = 100;

const DockModel: React.FC<DockModelProps> = ({ 
  position = [0, 0, 0], 
  rotation = [0, 0, 0], 
  scale = 1,
  realWorldLength = DEFAULT_DOCK_LENGTH_FEET,
  onClick,
  onDoubleClick,
  onPointerOver,
  onPointerOut,
  userData
}) => {
  const modelRef = useRef<THREE.Group>(null);
  const { camera } = useThree();
  
  // Format position properly for the primitive component
  const formattedPosition: [number, number, number] = Array.isArray(position) 
    ? position as [number, number, number]
    : [position.x, position.z, -position.y]; // Map local Z to THREE Y, negate local Y for THREE Z

  // Format rotation properly for the primitive component
  const formattedRotation: [number, number, number] = Array.isArray(rotation)
    ? rotation as [number, number, number]
    : [
        THREE.MathUtils.degToRad(rotation.x || 0),
        THREE.MathUtils.degToRad(rotation.z || 0), // Map local Z rot to THREE Y rot
        -THREE.MathUtils.degToRad(rotation.y || 0)  // Map local Y rot to THREE Z rot (negated)
      ];
  
  // Use the FBX loader to load the model
  const fbx = useLoader(
    FBXLoader, 
    '/models/3d-cargo-dockyard/source/3D Cargo Dockyard.fbx',
    (loader) => {
      // Set texture path to the textures directory
      loader.setPath('/models/3d-cargo-dockyard/textures/');
    }
  );
  
  // Use memo to avoid recreating the model on re-renders
  const model = useMemo(() => {
    if (!fbx) return null;
    
    // Create a copy of the loaded model
    const modelCopy = fbx.clone();
    
    // Process the model - optimize materials, add shadows, etc.
    modelCopy.traverse((node: any) => {
      if (node.isMesh) {
        // Enable shadows
        node.castShadow = true;
        node.receiveShadow = true;
        
        // Ensure materials are properly applied
        if (node.material) {
          // Set consistent material properties
          if (Array.isArray(node.material)) {
            node.material.forEach((mat: any) => {
              mat.side = THREE.DoubleSide;
              mat.needsUpdate = true;
            });
          } else {
            node.material.side = THREE.DoubleSide;
            node.material.needsUpdate = true;
          }
        }
      }
    });
    
    return modelCopy;
  }, [fbx]);
  
  // Calculate model dimensions and appropriate scale
  const [modelDimensions, calculatedScale] = useMemo(() => {
    if (!model) return [null, null];
    
    // Create a bounding box to measure the model
    const bbox = new THREE.Box3().setFromObject(model);
    const size = bbox.getSize(new THREE.Vector3());
    
    // Log the raw model dimensions
    console.log('Raw dock model dimensions (model units):', {
      width: size.x,
      height: size.y,
      length: size.z
    });
    
    // Convert realWorldLength from feet to meters (our scene units)
    const targetLengthMeters = feetToMeters(realWorldLength);
    
    // Calculate scaling factor needed to achieve the target length
    // We use the maximum dimension as the model's "length"
    const maxDimension = Math.max(size.x, size.y, size.z);
    const scaleFactor = targetLengthMeters / maxDimension;
    
    console.log(`Scaling dock model to match ${realWorldLength} feet (${targetLengthMeters.toFixed(2)} meters)`);
    console.log(`Calculated scale factor: ${scaleFactor}`);
    
    return [size, scaleFactor];
  }, [model, realWorldLength]);
  
  // Apply any necessary transformations after the model loads
  useEffect(() => {
    if (modelRef.current && model && modelDimensions) {
      // Calculate the bounding box to get proper dimensions and center
      const box = new THREE.Box3().setFromObject(modelRef.current);
      const center = box.getCenter(new THREE.Vector3());
      const size = box.getSize(new THREE.Vector3());
      
      // IMPORTANT: Adjust the model position to ensure it stays grounded
      // This moves the pivot point to the bottom center of the model
      modelRef.current.position.y -= (box.min.y - formattedPosition[1]);
      
      console.log('Dock model loaded with dimensions (after scaling):', {
        width: modelDimensions.x * (calculatedScale || 1),
        height: modelDimensions.y * (calculatedScale || 1),
        length: modelDimensions.z * (calculatedScale || 1),
        units: 'meters',
        boundingBox: {
          min: { x: box.min.x, y: box.min.y, z: box.min.z },
          max: { x: box.max.x, y: box.max.y, z: box.max.z }
        }
      });
    }
  }, [model, modelDimensions, calculatedScale, formattedPosition]);
  
  // Return null if model hasn't loaded yet
  if (!model) return null;
  
  // Determine the final scale to apply with more predictable behavior
  let finalScale: [number, number, number];

  // Create a normalizing factor to make scale adjustments more intuitive
  // This smooths out the extreme jumps in scaling
  const SCALE_NORMALIZATION_FACTOR = 0.1; // This makes the scale more reasonable

  // IMPROVED: More intuitive manual scaling detection
  const isManualScaling = typeof scale === 'number' 
    ? (scale !== 1.0) // Any non-default scale is considered manual
    : Array.isArray(scale) 
      ? (!scale.every(val => val === 1.0))
      : false;

  // Detailed logging for debugging
  console.log(`DockModel scale check: scale=${typeof scale === 'number' ? scale : JSON.stringify(scale)}, isManualScaling=${isManualScaling}`);

  if (calculatedScale !== null && !isManualScaling) {
    // If using the calculated real-world scale
    finalScale = [
      calculatedScale,
      calculatedScale,
      calculatedScale
    ];
    console.log('Using calculated scale with realWorldLength:', finalScale);
  } else {
    // For manual scaling, apply a normalization factor to make the increments more reasonable
    const normalizedScale = typeof scale === 'number'
      ? scale * SCALE_NORMALIZATION_FACTOR
      : (scale as number[]).map(s => s * SCALE_NORMALIZATION_FACTOR);
    
    finalScale = Array.isArray(normalizedScale) 
      ? normalizedScale as [number, number, number] 
      : [normalizedScale, normalizedScale, normalizedScale];
    
    console.log('Using normalized manual scale:', finalScale, 'from original:', scale);
  }
  
  return (
    <primitive
      ref={modelRef}
      object={model}
      position={formattedPosition}
      rotation={formattedRotation}
      scale={finalScale}
      onClick={onClick}
      onDoubleClick={onDoubleClick}
      onPointerOver={onPointerOver}
      onPointerOut={onPointerOut}
      userData={userData}
    />
  );
};

// Preload the model for better performance
useLoader.preload(FBXLoader, '/models/3d-cargo-dockyard/source/3D Cargo Dockyard.fbx');

export default DockModel; 